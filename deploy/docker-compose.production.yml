version: '3.8'

# Production Docker Compose Configuration
# Optimized for high-availability and monitoring

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: factor-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - factor_frontend
      - factor_backend
    depends_on:
      - factor-api-1
      - factor-api-2
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Factor API - Instance 1
  factor-api-1:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: factor-api-1
    restart: unless-stopped
    environment:
      - FACTOR_ENV=production
      - FACTOR_LOG_LEVEL=WARNING
      - FACTOR_API_PORT=8000
      - FACTOR_CONFIG=/app/config.yaml
      - FACTOR_INSTANCE_ID=api-1
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../data:/app/data:ro
      - ../config.yaml:/app/config.yaml:ro
      - factor_logs:/app/logs
      - factor_outputs:/app/outputs
    networks:
      - factor_backend
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["api"]

  # Factor API - Instance 2
  factor-api-2:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: factor-api-2
    restart: unless-stopped
    environment:
      - FACTOR_ENV=production
      - FACTOR_LOG_LEVEL=WARNING
      - FACTOR_API_PORT=8000
      - FACTOR_CONFIG=/app/config.yaml
      - FACTOR_INSTANCE_ID=api-2
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../data:/app/data:ro
      - ../config.yaml:/app/config.yaml:ro
      - factor_logs:/app/logs
      - factor_outputs:/app/outputs
    networks:
      - factor_backend
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: ["api"]

  # Background Workers
  factor-worker-1:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: factor-worker-1
    restart: unless-stopped
    environment:
      - FACTOR_ENV=production
      - FACTOR_LOG_LEVEL=INFO
      - FACTOR_CONFIG=/app/config.yaml
      - FACTOR_WORKER_ID=worker-1
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DATABASE_URL=postgresql://factor:password@postgres:5432/factor_db
    volumes:
      - ../data:/app/data:ro
      - ../config.yaml:/app/config.yaml:ro
      - factor_logs:/app/logs
      - factor_outputs:/app/outputs
    networks:
      - factor_backend
    depends_on:
      - redis
      - postgres
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    command: ["worker"]

  # Redis - High Availability
  redis:
    image: redis:7-alpine
    container_name: factor-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - factor_backend
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: factor-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=factor_db
      - POSTGRES_USER=factor
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - factor_backend
    ports:
      - "127.0.0.1:5432:5432"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U factor -d factor_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: factor-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - factor_backend
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: factor-grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-your-secret-key}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/factor-overview.json
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - factor_backend
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Log Aggregation - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: factor-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - factor_backend
    ports:
      - "127.0.0.1:9200:9200"
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Log Aggregation - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: factor-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "127.0.0.1:5601:5601"
    networks:
      - factor_backend
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

# Persistent Volumes
volumes:
  factor_logs:
    driver: local
  factor_outputs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

# Networks
networks:
  factor_frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  factor_backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24
