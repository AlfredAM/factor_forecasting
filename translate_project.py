#!/usr/bin/env python3
"""
Project Translation Script
Translates all Chinese comments, strings, and logs to English
Removes emoji icons throughout the project
"""

import os
import re
import glob
from pathlib import Path
from typing import Dict, List, Tuple

# Chinese to English translation mappings
TRANSLATIONS = {
    # Common terms
    "setup": "setup",
    "initialize": "initialize", 
    "configure": "configure",
    "training": "training",
    "model": "model",
    "data": "data",
    "process": "process",
    "load": "load",
    "save": "save",
    "check": "check",
    "verification": "validate",
    "test": "test",
    "error": "error",
    "warning": "warning",
    "info": "info",
    "debug": "debug",
    "start": "start",
    "stop": "stop",
    "complete": "complete",
    "success": "success",
    "failed": "failed",
    "run": "run",
    "execute": "execute",
    "create": "create",
    "delete": "delete",
    "update": "update",
    "get": "get",
    "set": "set",
    "calculate": "calculate",
    "predict": "predict",
    "evaluate": "evaluate",
    "optimize": "optimize",
    "distributed": "distributed",
    "parallel": "parallel",
    "memory": "memory",
    "GPU memory": "GPU memory",
    "batch": "batch",
    "size": "size",
    "learning rate": "learning rate",
    "loss": "loss",
    "accuracy": "accuracy",
    "metrics": "metrics",
    "features": "features",
    "target": "target",
    "process": "preprocess",
    "process": "postprocess",
    "hyperparameters": "hyperparameters",
    "parameter": "parameters",
    "weights": "weights",
    "bias": "bias",
    "gradient": "gradient",
    "Backward pass": "backpropagation",
    "Forward pass": "forward pass",
    "monitor": "monitoring",
    "log": "log",
    "output": "output",
    "input": "input",
    "file": "file",
    "directory": "directory",
    "path": "path",
    "format": "format",
    "type": "type",
    "method": "method",
    "function": "function",
    "class": "class",
    "object": "object",
    "variable": "variable",
    "constant": "constant",
    "cache": "cache",
    "queue": "queue",
    "stack": "stack",
    "dictionary": "dictionary",
    "list": "list",
    "array": "array",
    "tensor": "tensor",
    "dimension": "dimension",
    "shape": "shape",
    "size": "size",
    "length": "length",
    "width": "width",
    "height": "height",
    "depth": "depth",
    "channel": "channel",
    "layer": "layer",
    "network": "network",
    "architecture": "architecture",
    "structure": "structure",
    "component": "component",
    "module": "module",
    "interface": "interface",
    "protocol": "protocol",
    "connect": "connection",
    "session": "session",
    "transaction": "transaction",
    "state": "state",
    "condition": "condition",
    "loop": "loop",
    "branch": "branch",
    "decision": "decision",
    "comparison": "comparison",
    "operation": "operation",
    "algorithm": "algorithm",
    "strategy": "strategy",
    "pattern": "pattern",
    "framework": "framework",
    "library": "library",
    "package": "package",
    "dependent": "dependency",
    "version": "version",
    "environment": "environment",
    "platform": "platform",
    "system": "system",
    "service": "service",
    "client": "client",
    "service": "server",
    "datalibrary": "database",
    "table": "table",
    "field": "field",
    "index": "index",
    "query": "query",
    "search": "search",
    "filter": "filter",
    "sort": "sort",
    "group": "group",
    "aggregate": "aggregate",
    "statistics": "statistics",
    "analysis": "analysis",
    "report": "report",
    "table": "chart",
    "visualization": "visualization",
    "interface": "interface",
    "user": "user",
    "permission": "permission",
    "security": "security",
    "encryption": "encryption",
    "decryption": "decryption",
    "authentication": "authentication",
    "authorization": "authorization",
    "token": "token",
    "key": "key",
    "certificate": "certificate",
    "signature": "signature",
    "verification": "verification",
    "validation": "validation",
    "check": "check",
    "audit": "audit",
    "supervision": "supervision",
    "management": "management",
    "control": "control",
    "adjustment": "adjustment",
    "adjustment": "adjustment",
    "modification": "modification",
    "edit": "edit",
    "add": "add",
    "reduce": "reduce",
    "enhance": "enhance",
    "improve": "improve",
    "upgrade": "upgrade",
    "downgrade": "downgrade",
    "rollback": "rollback",
    "restore": "restore",
    "backup": "backup",
    "synchronization": "synchronize",
    "asynchronous": "asynchronous",
    "concurrent": "concurrent",
    "serial": "serial",
    "sequential": "sequential",
    "random": "random",
    "fixed": "fixed",
    "dynamic": "dynamic",
    "static": "static",
    "temporary": "temporary",
    "permanent": "permanent",
    "global": "global",
    "local": "local",
    "public": "public",
    "private": "private",
    "protected": "protected",
    "inheritance": "inheritance",
    "polymorphism": "polymorphism",
    "encapsulation": "encapsulation",
    "abstraction": "abstraction",
    "implementation": "implementation",
    "interface": "interface",
    "abstractionclass": "abstract class",
    "class": "concrete class",
    "instance": "instance",
    "object": "object",
    "reference": "reference",
    "pointer": "pointer",
    "address": "address",
    "memory": "memory leak",
    "garbage collection": "garbage collection",
    "resource": "resource",
    "thread": "thread",
    "process": "process",
    "task": "task",
    "job": "job",
    "queue": "queue",
    "scheduling": "scheduling",
    "priority": "priority",
    "synchronization": "synchronization",
    "mutex": "mutex",
    "lock": "lock",
    "semaphore": "semaphore",
    "conditionvariable": "condition variable",
    "event": "event",
    "callback": "callback",
    "hook": "hook",
    "plugin": "plugin",
    "extension": "extension",
    "configurefile": "configuration file",
    "environmentvariable": "environment variable",
    "command line": "command line",
    "parameter": "parameter",
    "option": "option",
    "switch": "switch",
    "flag": "flag",
    "label": "label",
    "mark": "mark",
    "comment": "comment",
    "documentation": "documentation",
    "description": "description",
    "help": "help",
    "usage": "usage",
    "example": "example",
    "demo": "demo",
    "sample": "sample",
    "template": "template",
    "model": "model",
    "prototype": "prototype",
    "scaffold": "scaffold",
    "skeleton": "skeleton",
    "framework": "framework",
    "foundation": "foundation",
    "core": "core",
    "center": "center",
    "main": "main",
    "secondary": "secondary",
    "important": "important",
    "key": "key",
    "necessary": "necessary",
    "optional": "optional",
    "default": "default",
    "custom": "custom",
    "standard": "standard",
    "general": "general",
    "special": "special",
    "unique": "unique",
    "common": "common",
    "same": "same",
    "different": "different",
    "class": "similar",
    "related": "related",
    "unrelated": "unrelated",
    "dependent": "dependent",
    "independent": "independent",
    "compatible": "compatible",
    "compatible": "incompatible",
    "support": "support",
    "support": "unsupported",
    "enable": "enable",
    "disable": "disable",
    "turn on": "turn on",
    "close": "turn off",
    "open": "open",
    "close": "close",
    "connect": "connect",
    "disconnect": "disconnect",
    "establish": "establish",
    "terminate": "terminate",
    "begin": "begin",
    "end": "end",
    "pause": "pause",
    "continue": "continue",
    "begin": "restart",
    "reset": "reset",
    "clear": "clear",
    "cleanup": "cleanup",
    "refresh": "refresh",
    "update": "update",
    "load": "reload",
    "rebuild": "rebuild",
    "reinstall": "reinstall",
    "configure": "reconfigure",
    "initialize": "reinitialize",
    "start": "restart",
    "install": "install",
    "uninstall": "uninstall",
    "deploy": "deploy",
    "release": "release",
    "build": "build",
    "compile": "compile",
    "link": "link",
    "package": "package",
    "compress": "compress",
    "decompress": "decompress",
    "archive": "archive",
    "extract": "extract",
    "import": "import",
    "export": "export",
    "upload": "upload",
    "download": "download",
    "send": "send",
    "receive": "receive",
    "transfer": "transfer",
    "copy": "copy",
    "move": "move",
    "rename": "rename",
    "delete": "delete",
    "recycle": "recycle",
    "restore": "restore",
    "undo": "undo",
    "redo": "redo",
    "history": "history",
    "record": "record",
    "trace": "trace",
    "log": "log",
    "audit": "audit",
    "monitor": "monitor",
    "observe": "observe",
    "detect": "detect",
    "discover": "discover",
    "find": "find",
    "search": "search",
    "locate": "locate",
    "navigate": "navigate",
    "browse": "browse",
    "access": "access",
    "enter": "enter",
    "exit": "exit",
    "return": "return",
    "jump": "jump",
    "redirect": "redirect",
    "forward": "forward",
    "redirect": "redirect",
    
    # Specific comments patterns
    "setupNCCLdebug": "Set NCCL timeout and debugging",
    "disableInfiniBandnetwork": "Disable InfiniBand to avoid network issues",
    "disableP2P": "Disable P2P communication",
    "distributedtraininginitialize": "Distributed training initialization",
    "initializedistributedtraining": "Initialize distributed training",
    "creatememorymanagement": "Create memory manager",
    "memoryvaluecleanupdata": "Relax memory thresholds to avoid frequent cleanup blocking data flow",
    "createdataload": "Create streaming data loader",
    "getdatafiletimesort": "Get data files with strict time ordering",
    "data": "Prevent data leakage",
    "usagefixedbatch": "Use fixed batch size",
    "starthardwaredata": "Determine based on hardware and data before starting",
    "disablebatch": "Ensure any adaptive batch logic is disabled",
    "Divide evenly by world_size": "Divide evenly by world_size",
    "accuracytraining": "Mixed precision training",
    "usagetorch.amp APIwarning": "Use new torch.amp API to avoid deprecation warnings",
    "createTCN+notemodel": "Create TCN+Attention model",
    "modelcompatibledifferentinputdimension": "Ensure model compatibility with different input dimensions",
    "packageDDPmodel": "Wrap as DDP model",
    "setupfindusageparameterFalse": "Set find_unused_parameters to False for better performance",
    "createlossfunction": "Create loss function",
    "createoptimize": "Create optimizer",
    "createlearning ratescheduling": "Create learning rate scheduler",
    "createICreport": "Create IC reporter",
    "standardtarget": "Normalize targets",
    "Expect batch['targets'] as": "Expect batch['targets'] as",
    "movedatadevice": "Move data to device",
    "Forward pass": "Forward pass",
    "calculateloss": "Calculate loss",
    "usagetimesteps": "Align: use last time step",
    "Backward pass": "Backward pass",
    "gradient": "Gradient clipping",
    "optimizesteps": "Optimizer step",
    "recordmetrics": "Record metrics",
    "reportIC": "Report IC periodically",
    "convertpredicttargetnumpyarrayICreport": "Convert predictions and targets to numpy arrays for IC reporter",
    "verification": "Validation phase",
    "buildverificationpredicttargetdictionary": "Build prediction and target dictionaries for validation phase",
    "addverificationdataout-of-sample": "Add validation data (as out-of-sample)",
    "savecheck": "Save checkpoint",
    "early stoppingcheck": "Early stopping check",
    "learning ratescheduling": "Learning rate scheduling",
    "yearstraining": "Annual rolling training",
    "cleanupresource": "Cleanup resources",
    "process": "Worker process",
    "distributedtrainingprocess": "Distributed training worker process",
    "loadconfigure": "Load configuration",
    "configureverification": "Configuration validation",
    "usagedefaultconfigure": "Use default configuration",
    "function": "Main function",
    "setupprocessstartmethod": "Set multiprocessing start method",
    "checkGPU": "Check GPU count",
    "Choose a free port": "Choose a free port",
    "startdistributedtraining": "Start distributed training",
    "startGPUtraining": "Start single GPU training",
}

# Emoji patterns to remove
EMOJI_PATTERNS = [
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r'',
    r'', r'', r'', r'', r'', r'', r'', r'', r'', r'', r''
]

def remove_emojis(text: str) -> str:
    """Remove emoji icons from text"""
    for pattern in EMOJI_PATTERNS:
        text = re.sub(pattern, '', text)
    return text

def translate_chinese_text(text: str) -> str:
    """Translate Chinese text to English"""
    # Remove emojis first
    text = remove_emojis(text)
    
    # Replace Chinese phrases and words
    for chinese, english in TRANSLATIONS.items():
        # Use word boundaries for better matching
        text = re.sub(rf'\b{re.escape(chinese)}\b', english, text)
        # Also try without word boundaries for partial matches
        text = text.replace(chinese, english)
    
    return text

def process_file(file_path: Path) -> bool:
    """Process a single file, translating Chinese content"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Check if file contains Chinese characters
        if not re.search(r'[\u4e00-\u9fff]', content):
            return False
        
        # Translate Chinese content
        translated_content = translate_chinese_text(content)
        
        # Write back to file
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(translated_content)
        
        print(f"Translated: {file_path}")
        return True
        
    except Exception as e:
        print(f"Error processing {file_path}: {e}")
        return False

def main():
    """Main translation function"""
    project_root = Path('.')
    
    # File patterns to process
    patterns = [
        '**/*.py',
        '**/*.md', 
        '**/*.yaml',
        '**/*.yml',
        '**/*.txt'
    ]
    
    # Directories to exclude
    exclude_dirs = {'venv', '.git', '.pytest_cache', '__pycache__', 'node_modules'}
    
    processed_count = 0
    
    for pattern in patterns:
        for file_path in project_root.glob(pattern):
            # Skip excluded directories
            if any(part in exclude_dirs for part in file_path.parts):
                continue
                
            if process_file(file_path):
                processed_count += 1
    
    print(f"\nTranslation complete! Processed {processed_count} files.")

if __name__ == "__main__":
    main()
